import streamlit as st
from openai import OpenAI
import os

# H√†m ƒë·ªçc n·ªôi dung t·ª´ t·∫•t c·∫£ file trong th∆∞ m·ª•c
def rfiles_from_folder(folder_path):
    """ ƒê·ªçc t·∫•t c·∫£ n·ªôi dung t·ª´ c√°c file trong th∆∞ m·ª•c v√† n·ªëi ch√∫ng l·∫°i. """
    content = []
    try:
        for filename in sorted(os.listdir(folder_path)):  # S·∫Øp x·∫øp ƒë·ªÉ ƒë·ªçc theo th·ª© t·ª±
            file_path = os.path.join(folder_path, filename)
            if os.path.isfile(file_path):  # Ch·ªâ ƒë·ªçc file, b·ªè qua th∆∞ m·ª•c con
                with open(file_path, "r", encoding="utf-8") as file:
                    content.append(file.read())
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc folder {folder_path}: {e}")
    return "\n\n".join(content)  # Gh√©p n·ªôi dung v·ªõi kho·∫£ng c√°ch gi·ªØa c√°c file

# H√†m ƒë·ªçc n·ªôi dung t·ª´ m·ªôt file c·ª• th·ªÉ
def rfile(name_file):
    try:
        with open(name_file, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        return ""

# Hi·ªÉn th·ªã logo tr√™n giao di·ªán
try:
    col1, col2, col3 = st.columns([3, 2, 3])
    with col2:
        st.image("logo.png", use_container_width=True)  
except:
    pass

# **Hi·ªÉn th·ªã n·ªôi dung t·ª´ `02.assistant.txt` v·ªõi font nh·ªè h∆°n**
assistant_content = rfile("02.assistant.txt")
st.markdown(f"""
    <h5 style="text-align: center;">{assistant_content}</h5>
    """, unsafe_allow_html=True)

# **H·ªôp ch·ªçn ch·ªß ƒë·ªÅ**
selected_topic = st.selectbox(
    "üîç Ch·ªçn lƒ©nh v·ª±c b·∫°n quan t√¢m:",
    ["Y t·∫ø", "M√¥i tr∆∞·ªùng", "AI", "Qu·∫£n tr·ªã, kinh doanh"]
)

# **Mapping ch·ªß ƒë·ªÅ v·ªõi th∆∞ m·ª•c d·ªØ li·ªáu**
topic_folder_mapping = {
    
    "Y t·∫ø": "training_data/healthcare",
    "M√¥i tr∆∞·ªùng": "training_data/environment",
    "AI": "training_data/ai",
    "Qu·∫£n tr·ªã, kinh doanh": "training_data/qtkd",
}

# **Ch·ªçn th∆∞ m·ª•c hu·∫•n luy·ªán t∆∞∆°ng ·ª©ng**
selected_folder = topic_folder_mapping.get(selected_topic, "training_data/misc")

# **L·∫•y OpenAI API key**
openai_api_key = st.secrets.get("OPENAI_API_KEY")

# **T·∫°o OpenAI client**
client = OpenAI(api_key=openai_api_key)

# **T·∫°o tin nh·∫Øn h·ªá th·ªëng d·ª±a tr√™n ch·ªß ƒë·ªÅ ƒë√£ ch·ªçn**
INITIAL_SYSTEM_MESSAGE = {
    "role": "system",
    "content": rfiles_from_folder(selected_folder)
}

# **L∆∞u tin nh·∫Øn v√†o session n·∫øu ch∆∞a c√≥**
if "messages" not in st.session_state:
    st.session_state.messages = [INITIAL_SYSTEM_MESSAGE]
else:
    # C·∫≠p nh·∫≠t d·ªØ li·ªáu hu·∫•n luy·ªán n·∫øu ng∆∞·ªùi d√πng ƒë·ªïi ch·ªß ƒë·ªÅ
    st.session_state.messages[0] = INITIAL_SYSTEM_MESSAGE

# **Hi·ªÉn th·ªã l·ªãch s·ª≠ chat (b·ªè qua system message)**
for message in st.session_state.messages:
    if message["role"] != "system":
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# **√î nh·∫≠p li·ªáu cho ng∆∞·ªùi d√πng**
if prompt := st.chat_input("üí¨ Nh·∫≠p n·ªôi dung c·∫ßn trao ƒë·ªïi t·∫°i ƒë√¢y..."):

    # **L∆∞u tr·ªØ v√† hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng**
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # **G·ªçi OpenAI API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi**
    response_content = ""
    with st.chat_message("assistant"):
        message_placeholder = st.empty()  # T·∫°o placeholder ƒë·ªÉ c·∫≠p nh·∫≠t n·ªôi dung d·∫ßn
        try:
            stream = client.chat.completions.create(
                model=rfile("module_chatgpt.txt").strip(),
                messages=[{"role": m["role"], "content": m["content"]} for m in st.session_state.messages]
            )
            
            # L·∫•y n·ªôi dung ph·∫£n h·ªìi
            response_content = stream.choices[0].message.content
            message_placeholder.markdown(response_content)

        except Exception as e:
            response_content = "‚ùå ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi API!"
            message_placeholder.markdown(response_content)

    # **L∆∞u ph·∫£n h·ªìi v√†o session**
    st.session_state.messages.append({"role": "assistant", "content": response_content})
